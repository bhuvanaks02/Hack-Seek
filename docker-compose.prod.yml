version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: hackseek_postgres_prod
    environment:
      POSTGRES_DB: hackseek_db
      POSTGRES_USER: hackseek_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hackseek_user -d hackseek_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hackseek-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hackseek_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hackseek-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hackseek_backend_prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://hackseek_user:${DATABASE_PASSWORD}@postgres:5432/hackseek_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
      - SENTRY_DSN=${SENTRY_DSN}
      - WORKERS=4
      - MAX_CONNECTIONS=1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hackseek-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hackseek_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${API_BASE_URL}
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - hackseek-network

  # Web scraper service
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: hackseek_scraper_prod
    environment:
      - DATABASE_URL=postgresql://hackseek_user:${DATABASE_PASSWORD}@postgres:5432/hackseek_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hackseek_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - hackseek-network

volumes:
  postgres_prod_data:
  redis_prod_data:
  nginx_cache:

networks:
  hackseek-network:
    driver: bridge